// <auto-generated />
using System;
using MVCP_BookStore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCP_BookStore.Migrations
{
    [DbContext(typeof(BookStoreDBContext))]
    partial class BookStoreDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVCP_BookStore.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Astrid Lindgren",
                            DatePublished = new DateTime(2013, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "9789129688313",
                            ImageUrl = "/images/lejonhjärta.jpg",
                            Language = "Swedish",
                            Price = 139,
                            Title = "Bröderna Lejonhjärta"
                        },
                        new
                        {
                            Id = 2,
                            Author = "J. R. R. Tolkien",
                            DatePublished = new DateTime(1991, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "9780261102354",
                            ImageUrl = "/images/lotr.jpg",
                            Language = "English",
                            Price = 100,
                            Title = "The Fellowship of the Ring"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Dennis Lehane",
                            DatePublished = new DateTime(2011, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "9780062068408",
                            ImageUrl = "/images/mystic-river.jpg",
                            Language = "English",
                            Price = 91,
                            Title = "Mystic River"
                        },
                        new
                        {
                            Id = 4,
                            Author = "John Steinbeck",
                            DatePublished = new DateTime(1994, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "9780062068408",
                            ImageUrl = "/images/of-mice-and-men.jpg",
                            Language = "English",
                            Price = 166,
                            Title = "Of Mice and Men"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Ernest Hemingway",
                            DatePublished = new DateTime(1994, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "9780062068408",
                            ImageUrl = "/images/old-man-and-the-sea.jpg",
                            Language = "English",
                            Price = 84,
                            Title = "The Old Man and the Sea"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2007, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "9780307386458",
                            ImageUrl = "/images/the-road.jpg",
                            Language = "English",
                            Price = 95,
                            Title = "The Road"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2007, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "9780307386458",
                            ImageUrl = "/images/Battelfield.jpg",
                            Language = "English",
                            Price = 180,
                            Title = "Battlefield of the mind"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2008, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "9780307386458",
                            ImageUrl = "/images/Dont believe.jpg",
                            Language = "English",
                            Price = 95,
                            Title = "Dont Believe Everything You Think"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2017, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "9780307381122",
                            ImageUrl = "/images/flyIt like.jpg",
                            Language = "English",
                            Price = 225,
                            Title = "Fly It Like you Stole It"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "8899307381122",
                            ImageUrl = "/images/HarryPotter.jpg",
                            Language = "English",
                            Price = 225,
                            Title = "Harry Potter:JK Rowling "
                        },
                        new
                        {
                            Id = 11,
                            Author = "Agatha McCarthy",
                            DatePublished = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "8899307381122",
                            ImageUrl = "/images/how to talk.jpg",
                            Language = "English",
                            Price = 225,
                            Title = "How to Talk to AnyOne "
                        },
                        new
                        {
                            Id = 12,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "8899397381122",
                            ImageUrl = "/images/inner exellience.jpg",
                            Language = "English",
                            Price = 225,
                            Title = "Inner Excellence "
                        },
                        new
                        {
                            Id = 13,
                            Author = "Ernest Hemingway",
                            DatePublished = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "8899307381122",
                            ImageUrl = "/images/IronFlame.webp",
                            Language = "English",
                            Price = 400,
                            Title = "Iron Flame  "
                        },
                        new
                        {
                            Id = 14,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "8899307381122",
                            ImageUrl = "/images/RichDad.webp",
                            Language = "English",
                            Price = 225,
                            Title = "Rich Dad Poor Dad "
                        },
                        new
                        {
                            Id = 15,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "8899307381122",
                            ImageUrl = "/images/Source code.jpg",
                            Language = "English",
                            Price = 225,
                            Title = "Source Code"
                        },
                        new
                        {
                            Id = 16,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2018, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "8899307381122",
                            ImageUrl = "/images/theWay.jpg",
                            Language = "English",
                            Price = 225,
                            Title = "The Way Of Superior Man"
                        },
                        new
                        {
                            Id = 17,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2018, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "8899307381122",
                            ImageUrl = "/images/tradinig in thezone.jpg",
                            Language = "English",
                            Price = 300,
                            Title = "Trading In The Zone"
                        },
                        new
                        {
                            Id = 18,
                            Author = "Cormac McCarthy",
                            DatePublished = new DateTime(2018, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "loreim ipsum",
                            ISBN = "8899307381122",
                            ImageUrl = "/images/You Become What You Think about.jpg",
                            Language = "English",
                            Price = 300,
                            Title = "You Become What You Think about"
                        });
                });

            modelBuilder.Entity("MVCP_BookStore.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MVCP_BookStore.Models.DefaultUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UserCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MVCP_BookStore.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderTotal")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderPlaced")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("MVCP_BookStore.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("orderItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVCP_BookStore.Models.CartItem", b =>
                {
                    b.HasOne("MVCP_BookStore.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MVCP_BookStore.Models.OrderItem", b =>
                {
                    b.HasOne("MVCP_BookStore.Models.Book", "book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCP_BookStore.Models.Order", "order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVCP_BookStore.Models.DefaultUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVCP_BookStore.Models.DefaultUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCP_BookStore.Models.DefaultUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVCP_BookStore.Models.DefaultUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVCP_BookStore.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
